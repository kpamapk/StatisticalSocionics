---
import Hr from "./Hr.astro";
import IconX from "@/assets/icons/IconX.svg";
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSearch from "@/assets/icons/IconSearch.svg";
import IconArchive from "@/assets/icons/IconArchive.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";
import IconMenuDeep from "@/assets/icons/IconMenuDeep.svg";
import LinkButton from "./LinkButton.astro";
import { SITE } from "@/config";

import { types } from "@/data/types";
import { functions } from "@/data/functions";
import { dichotomies } from "@/data/dichotomies";

const { pathname } = Astro.url;

const currentPath =
  pathname.endsWith("/") && pathname !== "/" ? pathname.slice(0, -1) : pathname;

const isActive = (path: string) => {
  const currentPathArray = currentPath.split("/").filter(p => p.trim());
  const pathArray = path.split("/").filter(p => p.trim());

  return currentPath === path || currentPathArray[0] === pathArray[0];
};
---

<header>
  <a
    id="skip-to-content"
    href="#main-content"
    class="absolute -top-full left-16 z-50 bg-background px-3 py-2 text-accent backdrop-blur-lg transition-all focus:top-4"
  >
    Skip to content
  </a>
  <div class="mx-auto flex max-w-3xl flex-col items-center justify-between sm:flex-row">
    <div
      id="top-nav-wrap"
      class="relative flex w-full items-baseline justify-between bg-background p-4 sm:items-center sm:py-6"
    >
      <a href="/" class="absolute py-1 text-2xl leading-7 font-semibold whitespace-nowrap sm:static">
        {SITE.title}
      </a>
      <nav id="nav-menu" class="flex w-full flex-col items-center sm:ml-2 sm:flex-row sm:justify-end sm:space-x-4 sm:py-0">
        <button
          id="menu-btn"
          class="focus-outline self-end p-2 sm:hidden"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <IconX id="close-icon" class="hidden" />
          <IconMenuDeep id="menu-icon" />
        </button>
        <ul
          id="menu-items"
          class:list={[
            "mt-4 grid w-44 grid-cols-2 place-content-center gap-2",
            "[&>li>a]:block [&>li>a]:px-4 [&>li>a]:py-3 [&>li>a]:text-center [&>li>a]:font-medium [&>li>a]:hover:text-accent sm:[&>li>a]:px-2 sm:[&>li>a]:py-1",
            "hidden",
            "sm:mt-0 sm:ml-0 sm:flex sm:w-auto sm:gap-x-5 sm:gap-y-0",
          ]}
        >

          <!-- Dynamic Dropdown: Dichotomies -->
          <li class="col-span-2 relative group">
            <a href="/dichotomies" class="dropdown-toggle inline-block w-full px-4 py-3 text-center font-medium hover:text-accent sm:text-left"
              class:list={{ "active-nav": isActive("/dichotomies") }}>
              Dichotomies
            </a>
            <ul class="hidden sm:group-hover:flex absolute left-0 top-full z-10 max-h-96 w-60 flex-col overflow-y-auto bg-background shadow-lg">
              {dichotomies.map(d => (
                <li><a href={`/dichotomies/${d.slug}`} class="block px-4 py-2 hover:text-accent">{d.label}</a></li>
              ))}
            </ul>
          </li>

          <!-- Dynamic Dropdown: Functions -->
          <li class="col-span-2 relative group">
            <a href="/functions" class="dropdown-toggle inline-block w-full px-4 py-3 text-center font-medium hover:text-accent sm:text-left"
              class:list={{ "active-nav": isActive("/functions") }}>
              Functions
            </a>
            <ul class="hidden sm:group-hover:flex absolute left-0 top-full z-10 w-64 flex-col bg-background shadow-lg">
              {functions.map(func => (
                <li><a href={`/functions/${func.code}`} class="block px-4 py-2 hover:text-accent">{func.code} – {func.name}</a></li>
              ))}
            </ul>
          </li>

          <!-- Dynamic Dropdown: Types -->
          <li class="col-span-2 relative group">
            <a href="/types" class="dropdown-toggle inline-block w-full px-4 py-3 text-center font-medium hover:text-accent sm:text-left"
              class:list={{ "active-nav": isActive("/types") }}>
              Types
            </a>
            <ul class="hidden sm:group-hover:flex absolute left-0 top-full z-10 max-h-96 w-64 flex-col overflow-y-auto bg-background shadow-lg">
              {types.map(type => (
                <li><a href={`/types/${type.code}`} class="block px-4 py-2 hover:text-accent">{type.code} – {type.name}</a></li>
              ))}
            </ul>
          </li>

          <!-- Static links -->
          <li class="col-span-2"><a href="/database" class:list={{ "active-nav": isActive("/database") }}>Database</a></li>
          <li class="col-span-2"><a href="/posts" class:list={{ "active-nav": isActive("/posts") }}>Posts</a></li>
          <li class="col-span-2"><a href="/tags" class:list={{ "active-nav": isActive("/tags") }}>Tags</a></li>
          <li class="col-span-2"><a href="/about" class:list={{ "active-nav": isActive("/about") }}>About</a></li>

          {SITE.showArchives && (
            <li class="col-span-2">
              <LinkButton
                href="/archives"
                class:list={[
                  "focus-outline flex justify-center p-3 sm:p-1",
                  { "active-nav [&>svg]:stroke-accent": isActive("/archives") },
                ]}
                ariaLabel="archives"
                title="Archives"
              >
                <IconArchive class="hidden sm:inline-block" />
                <span class="sm:sr-only">Archives</span>
              </LinkButton>
            </li>
          )}

          <li class="col-span-1 flex items-center justify-center">
            <LinkButton
              href="/search"
              class:list={[
                "focus-outline flex p-3 sm:p-1",
                { "[&>svg]:stroke-accent": isActive("/search") },
              ]}
              ariaLabel="search"
              title="Search"
            >
              <IconSearch />
              <span class="sr-only">Search</span>
            </LinkButton>
          </li>

          {SITE.lightAndDarkMode && (
            <li class="col-span-1 flex items-center justify-center">
              <button
                id="theme-btn"
                class="focus-outline relative size-12 p-4 sm:size-8 hover:[&>svg]:stroke-accent"
                title="Toggles light & dark"
                aria-label="auto"
                aria-live="polite"
              >
                <IconMoon class="absolute top-[50%] left-[50%] -translate-[50%] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
                <IconSunHigh class="absolute top-[50%] left-[50%] -translate-[50%] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
              </button>
            </li>
          )}
        </ul>
      </nav>
    </div>
  </div>
  <Hr />
</header>

<!-- ✅ Dropdown & mobile menu toggle script -->
<script>
  function toggleNav() {
    const menuBtn = document.querySelector("#menu-btn");
    const menuItems = document.querySelector("#menu-items");
    const menuIcon = document.querySelector("#menu-icon");
    const closeIcon = document.querySelector("#close-icon");

    if (!menuBtn || !menuItems || !menuIcon || !closeIcon) return;

    menuBtn.addEventListener("click", () => {
      const openMenu = menuBtn.getAttribute("aria-expanded") === "true";
      menuBtn.setAttribute("aria-expanded", openMenu ? "false" : "true");
      menuBtn.setAttribute("aria-label", openMenu ? "Open Menu" : "Close Menu");

      menuItems.classList.toggle("hidden");
      menuIcon.classList.toggle("hidden");
      closeIcon.classList.toggle("hidden");
    });

    const dropdownToggles = menuItems.querySelectorAll(".dropdown-toggle");
    dropdownToggles.forEach((toggle) => {
      const submenu = toggle.nextElementSibling;
      if (submenu && submenu.tagName === "UL") {
        toggle.addEventListener("click", (e) => {
          if (window.innerWidth < 640) {
            e.preventDefault();
            submenu.classList.toggle("hidden");
          }
        });
      }
    });
  }

  toggleNav();
  document.addEventListener("astro:after-swap", toggleNav);
</script>
